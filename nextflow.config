/**********************************
 Author and software info here
 **********************************/

manifest {
  name = 'isugifNF/nanoPolish'
  author = 'Andrew Severin'
  homePage = 'www.bioinformaticsworkbook.org'
  description = 'Nextflow adapted for bash scripting'
//  mainScript = 'main.nf'
  version = '1.0.0'
}


params {
  help = false
  outdir = './out_dir'
  threads = 16
  monochrome_logs = false
  queueSize = 18
  genome = "yourGenome.fasta"
  reads = "yourNanoporeReads.fastq"
  model = "medaka/medaka/data/r941_min_high_g303_model.hdf5"
  chunkSize = 25000 //this is the number of fasta records to split the file into
  options = " "
}

process {
  publishDir = "${baseDir}/$params.outdir"

  withName:runMinimap2 {
    clusterOptions =  '-N 1 -n 16 -t 2:00:00'
  }
/*
  withName:runRacon {
    clusterOptions =  '-N 1 -n 32 -p fat -t 48:00:00'
  }
  withName:medakaAlign {
    clusterOptions =  '-N 1 -n 32  -p fat -t 48:00:00'
  }
  withName:samSortIndex {
    clusterOptions =  '-N 1 -n 32 -p fat -t 48:00:00'
  }
*/

}

executor {
  queueSize = params.queueSize
  submitRateLimit = '20 sec'
}

profiles {
  condo { includeConfig './configs/condo.config' }
  ceres { includeConfig './configs/ceres.config' }
  local { includeConfig './configs/local.config'}
  nova { includeConfig './configs/nova.config'}
  test { includeConfig './configs/test.config'}

  docker {
    docker.enabled = true
  }

  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    // note: could probably go here... but I haven't tested this method
    // process {
    //   withLabel:'BUSCO' { container = 'list container name' } // <- if you use labels
    //   withName:runBUSCO { container = 'list container name' } // <- if you want to just use process name
    //}
    // note: otherwise I know putting above three lines into separate configs/singularity.config file works
    // includeConfig './configs/singularity.config'
  }
}

/* Not sure why this is necessary but nf-core/rnaseq had this line */
docker.runOptions = '-u \$(id -u):\$(id -g)'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "$params.outdir/timeline.html"
}

report {
  enabled = true
  file = "$params.outdir/report.html"
}
